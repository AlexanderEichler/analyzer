Name : Containment
Input : name_of_the_class_to_analyse, list of .cpp files : "This class and all classes this class is derived from will be analyzed","cpp files containing the implementations of the class hierarchy"
Info : "The analysis assumes that you want to run several instances of the given class in parallel. So member functions of two different instances may be called in parallel but public functions of a single instance are called sequentially (basically implementing a worker thread pattern). Given this assumption, the analysis determins where pointer to unsafe data may enter or leave the class instance indicating that a race condition may occur when the class instances are parallelized. The problems found might be fixed by using locks or copying data rather than passing pointers to data around."
Preprocessing : YES Command line; "command to generate .c file from list of .cpp files"
Interval Domain : NO
                    [ ] Trier ; [help string for the trier domain]      
                    [ ] Interval ; [help string for the interval domain]  
Context Sensitive : no [ ] Context 
Path Sensitive : no [ ] Context 
Options : list of strings; additional command line options for the goblint
Result : format string for errors ; "If the error is justified, then the analysis has become unsound."
         format string for warnings ; "If the warning is justified, then the semantics of the program is not invariant when parallelizing instances of this class. The problems must be fixed (e.g. using locks)."
         format string for misc messages ; "not used"
Dependencies : none
Solver : all
Goblint : --analysis containment --class name_of_the_class_to_analyse --gccwarn --stats --allfuns --noverify --result compact CXX.json SAFE.json

/*
 format string syntax: 
  %m : error message
  %f : file name
  %l : line 
  
 solvers: 
  demand driven (effectWCon) ; cannot solve interval domains "Global invariants for analyzing multithreaded applications" Seidl/Vene/MÃ¼ller-Olm
  round robin (solverConSideRR) ; cannot solve interval domains 
  round robin with widening and narrowing (solverConSideWNRR) ; can solve interval domains
 
 (If "interval domain" is selected in options somewhere then use round robin with widening and narrowing.)
  
Usage: goblint [options] source-files
  -o <file>  Prints the output to file.
  -v  Prints some status information.
  -I  Add include directory.
  -IK  Add kernel include directory.
  --includes  Uses custom include files.
  --libc  Merge with a custom implementation of standard libs.
  --justcil  Just print the transformed CIL output.
  --dopartial  Apply CIL's constant folding and partial evaluation.
  --cfg  prints the cfg into cfg.dot.
  --debug  Debug mode: for testing the analyzer itself.
  --warnings  Print soundness warnings.
  --trace <sys>  subsystem to show debug printfs for: con, sol.
  --stats  Outputs timing information.
  --eclipse  Flag for Goblin's Eclipse Plugin.
  --gccwarn  Output warnings in GCC format.
  --allfuns  Analyzes all the functions (not just beginning from main).
  --noverify  Skip the verification phase.
  --class  Analyzes all the member functions of the class (CXX.json file required).
  --nonstatic  Analyzes all non-static functions.
  --mainfun  Sets the name of the main function.
  --exitfun  Sets the name of the main function.
  --allglobs  Prints access information about all globals, not just races.
  --earlyglobs  Side-effecting of globals right after initialization.
  --write-races  Ignores read accesses altogether in reporting races.
  --failing-locks  Takes the possible failing of locking operations into account.
  --field-insensitive  Turns off field-sensitivity.
  --unmerged-fields  Does not merge accesses to possibly same fields, unsound.
  --die-on-collapse  Raise an exception as soon as an array collapses.
  --keepcpp  Keep the intermediate output of running the C preprocessor.
  --cppflags <flags>  Pre-processing parameters.
  --kernel For analyzing Linux Device Drivers.
  --showtemps  Shows CIL's temporary variables when printing the state.
  --uncalled  Display uncalled functions.
  --result <style>  Result style: none, state, indented, compact, or pretty.
  --analysis <name>  Deprecated: Picks the analysis: mcp.
  --with <name>  Enables features: containment malloc_null uninit OSEK OSEK2 mutex region base escape thread symb_locks var_eq access.
  --no <name>  Disables features: containment malloc_null uninit OSEK OSEK2 mutex region base escape thread symb_locks var_eq access.
  --context <name>  Enables context sensitivity on a feature.
  --no-context <name>  Disables context sensitivity on a feature.
  --type-inv <bool>  Should we use type invariants?
  --list-type <bool>  Should we use list types?
  --solver <name>  Picks the solver: effectWCon, effectWNCon, solverConSideRR, solverConSideWNRR.
  --dump <path>  Dumps the results to the given path
  --cilout <path>  Where to dump cil output
  --oil <file>  Oil file for the analysed program
  --intrpts  Enable constraints for interrupts.
  --timeout  Maximal time for analysis. (0 -- no timeout)
  --solver-progress  <bool> Used for debugging. Prints out a symbol on solving a rhs.
  -help  Display this list of options
  --help  Display this list of options
*/ 
